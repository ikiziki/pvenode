#!/bin/bash
# Dynamic MOTD with hostname-framed header, OS/Proxmox detection,
# colorized warnings, aligned dividers, and safer update checks.

# Colors (fallback-friendly)
RED="\e[31m"
YELLOW="\e[33m"
GREEN="\e[32m"
CYAN="\e[36m"
RESET="\e[0m"

# Helpers: safe command checks
has() { command -v "$1" >/dev/null 2>&1; }

# If this script is executed under /bin/sh (or another non-bash shell)
# re-exec it with bash so bash-specific syntax and regexes behave
# as intended. This covers systems that may source or run the script
# with a plain sh interpreter (some update-motd runners do that).
if [ -z "${BASH_VERSION:-}" ] && [ -x "/bin/bash" ]; then
    exec /bin/bash "$0" "$@"
fi

HOSTNAME=$(hostname 2>/dev/null || echo "$(cat /etc/hostname 2>/dev/null || echo unknown)")

# Load averages (safe fallback)
if [ -r /proc/loadavg ]; then
    read -r LOAD1 LOAD2 LOAD3 _ < /proc/loadavg || true
    LOADS="${LOAD1:-0} ${LOAD2:-0} ${LOAD3:-0}"
else
    if has uptime; then
        LOADS=$(uptime | awk -F'load average:' '{print $2}' | sed 's/^ //')
        LOAD1=$(printf "%s" "$LOADS" | cut -d, -f1 | sed 's/^ *//')
    else
        LOAD1=0
        LOADS="0, 0, 0"
    fi
fi

# Uptime
if has uptime; then
    UPTIME=$(uptime -p 2>/dev/null | sed 's/^up //')
else
    UPTIME="unknown"
fi

# Memory usage
if has free; then
    MEM_TOTAL=$(free -m | awk '/Mem:/ {print $2}')
    MEM_USED=$(free -m | awk '/Mem:/ {print $3}')
else
    if [[ -r /proc/meminfo ]]; then
        MEM_TOTAL=$(( $(awk '/MemTotal/ {print $2}' /proc/meminfo) / 1024 ))
        MEM_FREE=$(( $(awk '/MemFree/ {print $2}' /proc/meminfo) / 1024 ))
        MEM_BUFFERS=$(( $(awk '/Buffers/ {print $2}' /proc/meminfo) / 1024 ))
        MEM_CACHED=$(( $(awk '/^Cached/ {print $2}' /proc/meminfo) / 1024 ))
        MEM_USED=$(( MEM_TOTAL - MEM_FREE - MEM_BUFFERS - MEM_CACHED ))
    else
        MEM_TOTAL=0; MEM_USED=0
    fi
fi

if [[ -n "$MEM_TOTAL" && "$MEM_TOTAL" -gt 0 ]]; then
    MEM_PERCENT=$(( MEM_USED * 100 / MEM_TOTAL ))
else
    MEM_PERCENT=0
fi

# Colorize memory usage
if [ "$MEM_PERCENT" -ge 90 ]; then
    MEM_COLOR=$RED
elif [ "$MEM_PERCENT" -ge 70 ]; then
    MEM_COLOR=$YELLOW
else
    MEM_COLOR=$GREEN
fi

# Colorize load
if has bc; then
    if (( $(echo "$LOAD1 > 2" | bc -l) )); then
        LOAD_COLOR=$RED
    elif (( $(echo "$LOAD1 > 1" | bc -l) )); then
        LOAD_COLOR=$YELLOW
    else
        LOAD_COLOR=$GREEN
    fi
else
    LOAD_INT=${LOAD1%%.*}
    if [ "$LOAD_INT" -ge 2 ]; then
        LOAD_COLOR=$RED
    elif [ "$LOAD_INT" -ge 1 ]; then
        LOAD_COLOR=$YELLOW
    else
        LOAD_COLOR=$GREEN
    fi
fi

# OS / Proxmox info
if has pveversion; then
    PVE_LINE=$(pveversion 2>/dev/null | head -n1 || true)
    if [[ "$PVE_LINE" =~ ([0-9]+\.[0-9]+\.[0-9]+) ]]; then
        OS_INFO="Proxmox VE ${BASH_REMATCH[1]}"
    elif [[ "$PVE_LINE" =~ ([0-9]+\.[0-9]+)-([0-9]+) ]]; then
        OS_INFO="Proxmox VE ${BASH_REMATCH[1]}.${BASH_REMATCH[2]}"
    elif [[ "$PVE_LINE" =~ ([0-9]+\.[0-9]+) ]]; then
        OS_INFO="Proxmox VE ${BASH_REMATCH[1]}"
    else
        OS_INFO="Proxmox VE"
    fi
elif [[ -r /etc/os-release ]]; then
    . /etc/os-release
    if [[ "$ID" == "debian" || "$ID_LIKE" =~ debian ]]; then
        if [[ -n "$VERSION_ID" ]]; then
            OS_INFO="Debian ${VERSION_ID}"
        else
            OS_INFO="Debian"
        fi
    else
        if [[ -n "$PRETTY_NAME" ]]; then
            OS_INFO=${PRETTY_NAME%%,*}
        else
            OS_INFO="unknown"
        fi
    fi
else
    OS_INFO="unknown"
fi

# Kernel info
if has uname; then
    KERNEL_REL=$(uname -r 2>/dev/null || echo unknown)
    KERNEL_ARCH=$(uname -m 2>/dev/null || echo unknown)
    KERNEL_INFO="${KERNEL_REL} ${KERNEL_ARCH}"
else
    KERNEL_INFO="unknown"
fi

# Updates with slight delay when cache is stale
UPDATES_TEXT="unknown"
if has apt; then
    APT_CACHE="/var/cache/apt/pkgcache.bin"
    MAX_AGE=$((24 * 3600)) # 24 hours
    if [[ -f "$APT_CACHE" ]]; then
        CACHE_AGE=$(( $(date +%s) - $(stat -c %Y "$APT_CACHE") ))
    else
        CACHE_AGE=$((MAX_AGE + 1))
    fi

    if [[ $CACHE_AGE -le $MAX_AGE ]]; then
        UPDATES=$(apt list --upgradable 2>/dev/null | grep -vc "Listing...")
        UPDATES_TEXT="$UPDATES available"
    else
        if [[ $(id -u) -eq 0 ]]; then
            apt-get -qq update >/dev/null 2>&1
            UPDATES=$(apt list --upgradable 2>/dev/null | grep -vc "Listing...")
            UPDATES_TEXT="$UPDATES available (refreshed)"
        else
            UPDATES_TEXT="needs root to refresh"
        fi
    fi
else
    UPDATES_TEXT="n/a"
fi

# Colorize updates
UPDATE_COLOR=$GREEN
if [[ "$UPDATES_TEXT" =~ ^[0-9]+ ]]; then
    UPDATES_NUM=${UPDATES_TEXT%% *}
    if [ "$UPDATES_NUM" -eq 0 ]; then
        UPDATE_COLOR=$GREEN
    elif [ "$UPDATES_NUM" -lt 10 ]; then
        UPDATE_COLOR=$YELLOW
    else
        UPDATE_COLOR=$RED
    fi
else
    UPDATE_COLOR=$YELLOW
fi

# Build header line
PREFIX="--------------------[ "
SUFFIX=" ]--------------------"
HEADER_CONTENT="${PREFIX}${HOSTNAME}${SUFFIX}"
HEADER_LINE="${CYAN}${HEADER_CONTENT}${RESET}"
VISIBLE_LENGTH=${#HEADER_CONTENT}
DIVIDER="${CYAN}$(printf '%*s' "$VISIBLE_LENGTH" '' | tr ' ' '-')${RESET}"

# Output
echo -e "$HEADER_LINE"
echo -e " Load     : ${LOAD_COLOR}${LOADS}${RESET}"
if [[ -n "$MEM_TOTAL" && "$MEM_TOTAL" -gt 0 ]]; then
    echo -e " Memory   : ${MEM_COLOR}${MEM_USED}M / ${MEM_TOTAL}M (${MEM_PERCENT}%)${RESET}"
else
    echo -e " Memory   : ${YELLOW}unknown${RESET}"
fi
echo -e " Uptime   : ${GREEN}${UPTIME}${RESET}"
echo -e " OS       : ${GREEN}${OS_INFO}${RESET}"
echo -e " Kernel   : ${GREEN}${KERNEL_INFO}${RESET}"
echo -e " Updates  : ${UPDATE_COLOR}${UPDATES_TEXT}${RESET}"
echo -e "$DIVIDER"
